# Plans for all states on the QA environment.

name: $(Date:yyyyMMdd)$(Rev:.r)-infrastructure-plan-qa

trigger: none

parameters:
  - name: envShortCode
    type: string
    displayName: "Environment of the job (short code format: dev/qa/stage/prod)"
    values:
      - dev
      - qa
      - stage
      - prod
  - name: subscriptionShortCode
    type: string
    displayName: "subscription code (short code format: dev/qa/stage/prod)"
    values:
      - dev
      - stage
      - prod
  - name: stateFileName
    type: string
    displayName: "full name of the statefile"
  - name: pathToTFFolder
    type: string
    displayName: "infrastructure/{{state}}"
  - name: enviromentName
    type: string
    displayName: "name of the az devops environment (iaa - *)"
  - name: buildAgentName
    type: string
    displayName: "build agent variant"
    values:
      - ubuntu
      - IAA-BuildAgent

stages:
  - stage: terraform_plan_destroy
    displayName: "Deploy - dev - buildagent"
    jobs:
      - job: terraform_plan_destroy
        pool:
        ${{ if eq(parameters.buildAgentName, 'ubuntu') }}:
          vmImage: "ubuntu-latest"
        ${{ else }}:
          name: HDP Image Analyzer Application Agent
          demands:
            - agent.name -equals ${{ parameters.buildAgentName }}
        displayName: Terraform Plan Destroy
        steps:
          - checkout: self
          - task: TerraformTaskV2@2
            displayName: Terraform Init
            inputs:
              provider: "azurerm"
              command: "init"
              workingDirectory: ${{ parameters.pathToTFFolder }}
              backendServiceArm: "sp-iaa-${{ parameters.envShortCode }}-tf-serviceconnection"
              backendAzureRmResourceGroupName: "rg-backend-${{ parameters.envShortCode }}-weus-infra"
              backendAzureRmStorageAccountName: "stbackendtfdata${{ parameters.envShortCode }}"
              backendAzureRmContainerName: "tf-state-container"
              backendAzureRmKey: ${{ parameters.stateFileName }}
          - task: TerraformTaskV2@2
            displayName: Terraform Plan
            inputs:
              provider: "azurerm"
              command: "plan"
              workingDirectory: ${{ parameters.pathToTFFolder }}
              commandOptions: "-destroy -var environment=${{ parameters.envShortCode }} -var-file=vars/common.tfvars -var-file=vars/${{ parameters.envShortCode }}-mlw-weus.tfvars -out ${{ parameters.envShortCode }}-$(Build.BuildId).out"
              # QA and DEV use the same service connection since the SC is scoped by subscription.
              # Ideally they are also scoped to a resource group but because of the tight coupling they use the same.
              ${{ if eq(parameters.subscriptionShortCode, 'dev') }}:
                environmentServiceNameAzureRM: "sp-iaa-tf-serviceconnection"
              ${{ else}}:
                environmentServiceNameAzureRM: "sp-iaa-${{ parameters.subscriptionShortCode }}-tf-serviceconnection"
          - task: PublishPipelineArtifact@1
            displayName: Publish Artifacts
            inputs:
              targetPath: ${{ parameters.pathToTFFolder }}
              artifact: "terraform-iac-plan"
              publishLocation: "pipeline"
  - stage: terraform_destroy
    displayName: "Destroy "
    dependsOn: terraform_plan_destroy
    jobs:
      - deployment: destroy_resources
        pool:
        ${{ if eq(parameters.buildAgentName, 'ubuntu') }}:
          vmImage: "ubuntu-latest"
        ${{ else }}:
          name: HDP Image Analyzer Application Agent
          demands:
            - agent.name -equals ${{ parameters.buildAgentName }}
        displayName: Terraform Destroy
        environment: ${{ parameters.enviromentName }}
        strategy:
          runOnce:
            deploy:
              steps:
                # Enable execution permission on azurerm plugin
                - task: TerraformTaskV2@2
                  displayName: Terraform Apply
                  inputs:
                    provider: "azurerm"
                    command: "apply"
                    workingDirectory: ${{ parameters.pathToTFFolder }}
                    commandOptions: "${{ parameters.envShortCode }}-$(Build.BuildId).out"
                    ${{ if eq(parameters.subscriptionShortCode, 'dev') }}:
                      environmentServiceNameAzureRM: "sp-iaa-tf-serviceconnection"
                    ${{ else}}:
                      environmentServiceNameAzureRM: "sp-iaa-${{ parameters.envShortCode }}-tf-serviceconnection"
                  enabled: true
