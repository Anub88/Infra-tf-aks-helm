# Stage template runs plan for all states and is parameterized by environment.
parameters:
  - name: envShortCode
    type: string
    displayName: "Environment of the job (short code format: dev/qa/stage/prod)"
    default: "dev"
    values:
      - dev
      - qa
      - stage
      - prod
  - name: validate
    type: boolean
    displayName: "Run terraform validate or not."
    default: false
  - name: dependson
    type: string
    displayName: "Stage Dependencies."
    default: ""

stages:
  - ${{ if eq(parameters.envShortCode, 'qa') }}:
      - stage: terraform_plan_dev_buildagent
        displayName: "Plan - dev - buildagent"
        dependsOn: ${{ parameters.dependson }}
        variables:
          - template: "../../vars/dev-vars.yaml"
        jobs:
          # Build Agent state.
          - template: "../jobs/infra-plan-template.yaml"
            parameters:
              envShortCode: "dev"
              subscriptionShortCode: "${{ variables.subscriptionShortCode }}"
              stateFile: "${{ variables.stateFileBuildAgent }}"
              workDir: "$(System.DefaultWorkingDirectory)"
              buildId: "$(Build.BuildId)"
              pathToTFCode: "infrastructure/build-agent"
              buildAgentName: "${{ variables.managedBuildAgentName }}"
              stateDisplayName: "build_agent"
              validate: ${{ parameters.validate }}
  - ${{ else }}:
      - stage: terraform_plan_${{ parameters.envShortCode }}_buildagent
        displayName: "Plan - ${{ parameters.envShortCode }} - buildagent"
        dependsOn: ${{ parameters.dependson }}
        variables:
          - template: "../../vars/${{ parameters.envShortCode }}-vars.yaml"
        jobs:
          # Build Agent state.
          - template: "../jobs/infra-plan-template.yaml"
            parameters:
              envShortCode: "${{ parameters.envShortCode }}"
              subscriptionShortCode: "${{ variables.subscriptionShortCode }}"
              stateFile: "${{ variables.stateFileBuildAgent }}"
              workDir: "$(System.DefaultWorkingDirectory)"
              buildId: "$(Build.BuildId)"
              pathToTFCode: "infrastructure/build-agent"
              buildAgentName: "${{ variables.managedBuildAgentName }}"
              stateDisplayName: "build_agent"
              validate: ${{ parameters.validate }}

  - ${{ if eq(parameters.envShortCode, 'qa') }}:
      - stage: terraform_plan_dev_shared
        displayName: "Plan - dev - shared"
        dependsOn: ${{ parameters.dependson }}
        variables:
          - template: "../../vars/dev-vars.yaml"
        jobs:
          # Shared state.
          - template: "../jobs/infra-plan-template.yaml"
            parameters:
              envShortCode: "shared"
              subscriptionShortCode: "${{ variables.subscriptionShortCode }}"
              stateFile: "${{ variables.stateFileShared }}"
              workDir: "$(System.DefaultWorkingDirectory)"
              buildId: "$(Build.BuildId)"
              pathToTFCode: "infrastructure/shared"
              buildAgentName: "${{ variables.selfBuildAgentName }}"
              stateDisplayName: "shared"
              validate: ${{ parameters.validate }}
  - ${{ elseif eq(parameters.envShortCode, 'stage')}}:
      - stage: terraform_plan_${{ parameters.envShortCode }}_shared
        displayName: "Plan - ${{ parameters.envShortCode }} - shared"
        dependsOn: ${{ parameters.dependson }}
        variables:
          - template: "../../vars/${{ parameters.envShortCode }}-vars.yaml"
        jobs:
          # Shared state.
          - template: "../jobs/infra-plan-template.yaml"
            parameters:
              envShortCode: "stage"
              subscriptionShortCode: "${{ variables.subscriptionShortCode }}"
              stateFile: "${{ variables.stateFileShared }}"
              workDir: "$(System.DefaultWorkingDirectory)"
              buildId: "$(Build.BuildId)"
              pathToTFCode: "infrastructure/shared"
              buildAgentName: "${{ variables.selfBuildAgentName }}"
              stateDisplayName: "shared"
              validate: ${{ parameters.validate }}
  - ${{ else }}:
      - stage: terraform_plan_${{ parameters.envShortCode }}_shared
        displayName: "Plan - ${{ parameters.envShortCode }} - shared"
        dependsOn: ${{ parameters.dependson }}
        variables:
          - template: "../../vars/${{ parameters.envShortCode }}-vars.yaml"
        jobs:
          # Shared state.
          - template: "../jobs/infra-plan-template.yaml"
            parameters:
              envShortCode: "shared"
              subscriptionShortCode: "${{ variables.subscriptionShortCode }}"
              stateFile: "${{ variables.stateFileShared }}"
              workDir: "$(System.DefaultWorkingDirectory)"
              buildId: "$(Build.BuildId)"
              pathToTFCode: "infrastructure/shared"
              buildAgentName: "${{ variables.selfBuildAgentName }}"
              stateDisplayName: "shared"
              validate: ${{ parameters.validate }}

  - stage: terraform_plan_${{ parameters.envShortCode }}_mlware
    displayName: "Plan - ${{ parameters.envShortCode }} - mlware"
    dependsOn: ${{ parameters.dependson }}
    variables:
      - template: "../../vars/${{ parameters.envShortCode }}-vars.yaml"
    jobs:
      # MLWare state.
      - template: "../jobs/infra-plan-template.yaml"
        parameters:
          envShortCode: "${{ parameters.envShortCode }}"
          subscriptionShortCode: "${{ variables.subscriptionShortCode }}"
          stateFile: "${{ variables.stateFileMlware }}"
          workDir: "$(System.DefaultWorkingDirectory)"
          buildId: "$(Build.BuildId)"
          pathToTFCode: "infrastructure/mlware"
          buildAgentName: "${{ variables.selfBuildAgentName }}"
          stateDisplayName: "mlware"
          validate: ${{ parameters.validate }}

  - stage: terraform_plan_${{ parameters.envShortCode }}_apimgmt
    displayName: "Plan - ${{ parameters.envShortCode }} - apimgmt"
    dependsOn: ${{ parameters.dependson }}
    variables:
      - template: "../../vars/${{ parameters.envShortCode }}-vars.yaml"
    jobs:
      # APIManagement state.
      - template: "../jobs/infra-plan-template.yaml"
        parameters:
          envShortCode: "${{ parameters.envShortCode }}"
          subscriptionShortCode: "${{ variables.subscriptionShortCode }}"
          stateFile: "${{ variables.stateFileApim }}"
          workDir: "$(System.DefaultWorkingDirectory)"
          buildId: "$(Build.BuildId)"
          pathToTFCode: "infrastructure/apimgmt"
          buildAgentName: "${{ variables.selfBuildAgentName }}"
          stateDisplayName: "apimanagement"
          validate: ${{ parameters.validate }}

  - stage: terraform_plan_${{ parameters.envShortCode }}_s2s_appregistrations
    displayName: "Plan - ${{ parameters.envShortCode }} - _s2s_appregistrations"
    dependsOn: ${{ parameters.dependson }}
    variables:
      - template: "../../vars/${{ parameters.envShortCode }}-vars.yaml"
    jobs:
      # APIManagement state.
      - template: "../jobs/infra-plan-template.yaml"
        parameters:
          envShortCode: "${{ parameters.envShortCode }}"
          subscriptionShortCode: "${{ variables.subscriptionShortCode }}"
          stateFile: "${{ variables.stateFileappregistrations }}"
          workDir: "$(System.DefaultWorkingDirectory)"
          buildId: "$(Build.BuildId)"
          pathToTFCode: "infrastructure/hdp_appregistrations"
          buildAgentName: "${{ variables.selfBuildAgentName }}"
          stateDisplayName: "hdp_appregistrations"
          validate: ${{ parameters.validate }}